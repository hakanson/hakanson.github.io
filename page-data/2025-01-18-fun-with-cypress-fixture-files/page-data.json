{"componentChunkName":"component---src-templates-blog-post-js","path":"/2025-01-18-fun-with-cypress-fixture-files/","result":{"data":{"site":{"siteMetadata":{"title":"kevinhakanson.com","author":"Kevin Hakanson"}},"markdownRemark":{"id":"afb006b7-7e96-5111-835b-a4f181c582a9","excerpt":"aws-jwt-verify uses Conditional exports to support both Node.js and browser environments. The primary unit tests use Jest and run under Node.js, which means the…","html":"<p><a href=\"https://github.com/awslabs/aws-jwt-verify\">aws-jwt-verify</a> uses <a href=\"https://nodejs.org/api/packages.html#conditional-exports\">Conditional exports</a> to support both Node.js and browser environments.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"imports\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"#node-web-compat\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./node-web-compat-web.js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"default\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./node-web-compat-node.js\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The primary unit tests use <a href=\"https://jestjs.io/\">Jest</a> and run under Node.js, which means the browser imports are not used.  This is addressed by also testing with a <a href=\"https://vite.dev/\">Vite</a>-based web application using <a href=\"https://www.cypress.io/\">Cypress</a>.</p>\n<p>In 2022, when first using Cypress, I was smart enough to use <a href=\"https://docs.cypress.io/app/core-concepts/writing-and-organizing-tests#Fixture-Files\">fixture files</a>.  There is a <code class=\"language-text\">tests/vite-app/util/generateExampleTokens.ts</code> that generates JWT tokens and the corresponding <a href=\"https://datatracker.ietf.org/doc/html/rfc7517\">JSON Web Key Set</a> (JWKS), then saves into the web application and as fixtures for the Cypress tests.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">JWKSFILE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"example-JWKS.json\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">saveFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"public\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JWKSFILE</span><span class=\"token punctuation\">,</span> jwks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">saveFile</span><span class=\"token punctuation\">(</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cypress\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fixtures\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JWKSFILE</span><span class=\"token punctuation\">,</span> jwks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">saveFile</span><span class=\"token punctuation\">(</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cypress\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fixtures\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"example-token-data.json\"</span><span class=\"token punctuation\">,</span> tokendata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>However, I was not smart enough to read the docs about using <code class=\"language-text\">cy.fixture()</code>.  I instead abused TypeScript Resolve JSON Module (<a href=\"https://www.typescriptlang.org/tsconfig/#resolveJsonModule\">resolveJsonModule</a>).</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">JWKSURI</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../fixtures/example-token-data.json\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I used the <code class=\"language-text\">JWKSURI</code> value in <a href=\"https://docs.cypress.io/api/commands/intercept\"><code class=\"language-text\">cy.intercept()</code></a> below:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JWKSURI</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> fixture<span class=\"token operator\">:</span> <span class=\"token string\">\"example-JWKS\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Recently, I wanted to add another test for our <code class=\"language-text\">SimpleFetcher</code>. Instead of spying and stubbing the network request and response, I wanted to actually fetch over http and compare against <code class=\"language-text\">fixtures/example-JWKS.json</code> data.  I built up a shell of the test, then wasn’t sure what I to do next, so I asked <a href=\"https://aws.amazon.com/q/developer/\">Amazon Q Developer</a>.</p>\n<blockquote>\n<p>in the selected cypress test, how do I compare the result of the fetcher to the JSON data from the fixture file</p>\n</blockquote>\n<p>I got a nice explanation, and the full test code.  Below are the important lines:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">    cy<span class=\"token punctuation\">.</span><span class=\"token function\">fixture</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example-JWKS.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>jwksData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> fetcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleFetcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      fetcher<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JWKSURI</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>jwks<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>jwks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>deep<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>jwksData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then I wondered if there was a better way to reference <code class=\"language-text\">JWKSURI</code> and asked Q Developer this followup question.</p>\n<blockquote>\n<p>is there a more semantic way to get the JWKSURI value than using an import in the selected code? should I use cy.fixture instead?</p>\n</blockquote>\n<p>Of course there was.  Below is the final code for <code class=\"language-text\">tests/vite-app/cypress/e2e/fetcher.cy.ts</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/// &lt;reference types=\"cypress\" /></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SimpleFetcher <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"aws-jwt-verify/https\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fetcher\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> tokenData<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">fixture</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example-token-data.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      tokenData <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Simple JSON fetcher works\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">fixture</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example-JWKS.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>jwksData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> fetcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleFetcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      fetcher<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>tokenData<span class=\"token punctuation\">.</span><span class=\"token constant\">JWKSURI</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>jwks<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>jwks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>deep<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>jwksData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"Fun with Cypress Fixture Files","description":null,"date":"January 18, 2025","tags":["javascript","codequality","webdev"],"canonical":null}}},"pageContext":{"slug":"/2025-01-18-fun-with-cypress-fixture-files/","previous":{"fields":{"slug":"/2024-10-04-asking-claude-haiku-to-redefine-ab-testing/"},"frontmatter":{"tags":["genai"]}},"next":{"fields":{"slug":"/2025-03-29-vibe-architecting-an-api-gateway-http-api/"},"frontmatter":{"tags":["aws","http","security"]}}}},"staticQueryHashes":["2589769190","97908498"],"slicesMap":{}}