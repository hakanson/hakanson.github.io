{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-04-27-content-security-policy-http-header-braindump","webpackCompilationHash":"f141a48750e2a6a883f2","result":{"data":{"site":{"siteMetadata":{"title":"kevinhakanson.com","author":"Kevin Hakanson"}},"markdownRemark":{"id":"f23b63bf-9f56-5b59-8355-159052762612","excerpt":"From Content Security Policy (CSP) - HTTP | MDN Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of…","html":"<p>From <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\">Content Security Policy (CSP) - HTTP | MDN</a></p>\n<blockquote>\n<p><strong>Content Security Policy</strong> (<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/CSP\">CSP</a>) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/XSS\">XSS</a>) and data injection attacks</p>\n</blockquote>\n<p>From <a href=\"https://developers.google.com/web/fundamentals/security/csp/\">Content Security Policy  |  Web Fundamentals  |  Google Developers</a></p>\n<blockquote>\n<p>This overview highlights a defense that can significantly reduce the risk and impact of XSS attacks in modern browsers: Content Security Policy (CSP).</p>\n</blockquote>\n<p>From <a href=\"https://docs.microsoft.com/en-us/microsoft-edge/dev-guide/security/content-security-policy\">Dev guide - Content Security Policy - Microsoft Edge Development | Microsoft Docs</a></p>\n<blockquote>\n<p>The CSP security standard enables web developers to control the resources (script, CSS, plugins, images, etc.) which a particular page can fetch or execute with the aim of preventing cross-site scripting (XSS), clickjacking, and other code injection attacks seeking to execute malicious content in the context of a trusted web page.</p>\n</blockquote>\n<p>From <a href=\"https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf\">OWASP Top 10 - 2017</a> A7 Cross-Site Scripting (XSS)</p>\n<blockquote>\n<p>Enabling a Content Security Policy (CSP) is a defense-in-depth mitigating control against XSS.</p>\n</blockquote>\n<p>This can be controlled via the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\">Content-Security-Policy</a> HTTP Header.  The <a href=\"https://scotthelme.co.uk/csp-cheat-sheet/\">CSP Cheat Sheet</a> “is a concise overview of all supported features and directives” and “can be used as a quick reference guide” because of the many examples and external links.  CSP is supported at various levels in all major browsers (see <a href=\"https://caniuse.com/#search=Content%20Security%20Policy\">https://caniuse.com/#search=Content%20Security%20Policy</a>).  Twitter even sends different policies to different browsers (see <a href=\"https://github.com/twitter/secureheaders/blob/master/lib/secure_headers/headers/policy_management.rb\">secureheaders/policy_management.rb at master · twitter/secureheaders · GitHub</a> ), but they could do even better (see <a href=\"https://scotthelme.co.uk/optimising-twitters-csp-header/\">Optimising Twitter’s CSP header</a>).</p>\n<p>Some articles for getting started:</p>\n<ul>\n<li><a href=\"https://security.googleblog.com/2016/09/reshaping-web-defenses-with-strict.html\">Google Online Security Blog: Reshaping web defenses with strict Content Security Policy</a> </li>\n<li><a href=\"https://csp.withgoogle.com/docs/index.html\">Introduction - Content Security Policy</a> </li>\n<li><a href=\"https://www.troyhunt.com/my-blog-now-has-a-content-security-policy-heres-how-ive-done-it/\">My Blog Now Has a Content Security Policy - Here’s How I’ve Done It</a> </li>\n<li><a href=\"https://www.4armed.com/blog/how-to-create-content-security-policy/\">A proper Content Security Policy Generator | 4ARMED</a> </li>\n<li><a href=\"https://blog.codeship.com/how-to-get-started-with-a-content-security-policy/\">How to Get Started with a Content Security Policy</a></li>\n<li><a href=\"http://gosecure.net/2017/07/20/building-a-content-security-policy-configuration-with-csp-auditor/\">Building a Content Security Policy configuration with CSP Auditor</a></li>\n<li><a href=\"https://githubengineering.com/githubs-post-csp-journey/\">GitHub’s post-CSP journey | GitHub Engineering</a> </li>\n<li><a href=\"https://speakerdeck.com/mikispag/making-csp-great-again-michele-spagnuolo-and-lukas-weichselbaum\">Making CSP great again! - Michele Spagnuolo and Lukas Weichselbaum // Speaker Deck</a></li>\n<li><a href=\"https://www.safaribooksonline.com/learning-paths/learning-path-modern/9781492035817/9781491985298-video311488\">Learning Path: Modern Web Pillars—Security [Learning Path]</a> (Safari Online Video)</li>\n</ul>\n<p>The HTTP <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only\">Content-Security-Policy-Report-Only</a> response header allows web developers to experiment with policies by monitoring (but not enforcing) their effects.  Several tools leverage this browser reporting to help developers create policies:</p>\n<ul>\n<li>Fiddler:  <a href=\"https://github.com/david-risney/CSP-Fiddler-Extension\">GitHub - david-risney/CSP-Fiddler-Extension: Content Security Policy rule collector extension for Fiddler</a></li>\n<li>OWASP ZAP:  <a href=\"https://github.com/GoSecure/csp-auditor\">GitHub - GoSecure/csp-auditor: Burp and ZAP plugin to analyse Content-Security-Policy headers or generate template CSP c…</a></li>\n<li>Chrome: <a href=\"https://github.com/4ARMED/csp-generator-extension\">GitHub - 4ARMED/csp-generator-extension: Google Chrome Extension for interacting with 4ARMED’s Content Security Policy G…</a>  along with <a href=\"https://github.com/4ARMED/csp-backend\">GitHub - 4ARMED/csp-backend: Sinatra app that accepts CSP violation reports and generates policies based on them.</a></li>\n<li>Report URI CSP Wizard:  <a href=\"https://scotthelme.co.uk/report-uri-csp-wizard/\">https://scotthelme.co.uk/report-uri-csp-wizard/</a>  </li>\n</ul>\n<p>Other tools:</p>\n<ul>\n<li>Report URI: <a href=\"https://report-uri.com/home/tools\">https://report-uri.com/home/tools</a></li>\n<li>Firefox: <a href=\"https://developer.mozilla.org/en-US/docs/Tools/GCLI/Display_security_and_privacy_policies\">Display security and privacy policies - Firefox Developer Tools | MDN</a></li>\n<li>Google: <a href=\"https://csp-evaluator.withgoogle.com/\">CSP Evaluator</a> </li>\n<li><a href=\"https://github.com/nico3333fr/CSP-useful\">GitHub - nico3333fr/CSP-useful: Collection of scripts, thoughts about CSP (Content Security Policy)</a></li>\n</ul>\n<p>Since an invalid or incorrect policy will break the web applications, testing is important.  A good strategy is to start with a basic policy (like this one which forces all content to use HTTPS) and build it out to be even more secure.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Content-Security-Policy: default-src https:; form-action https:; connect-src https: wss:; upgrade-insecure-requests</code></pre></div>\n<p><a href=\"https://blog.dareboost.com/en/2016/08/how-to-implement-content-security-policy/\">How to implement Content Security Policy? | DareBoost Blog</a>  comments “that it is possible to use both Content-Security-Policy and Content-Security-Policy-Report-Only headers” which would allow for a basic policy to be in place and an experimental policy to be reported on, either in a lower environment or as part of a testing suite.</p>","frontmatter":{"title":"Content-Security-Policy HTTP Header Braindump","date":"April 27, 2018","tags":["http","webdev","javascript","security"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018-04-27-content-security-policy-http-header-braindump","previous":{"fields":{"slug":"/2018-04-10-secrets-management"},"frontmatter":{"tags":["security","podcast"]}},"next":{"fields":{"slug":"/2018-06-02-side-channel-attacking-browsers-through-css3-features"},"frontmatter":{"tags":["webdev","css","security"]}}}}}