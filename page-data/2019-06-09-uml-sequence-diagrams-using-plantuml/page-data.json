{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-06-09-uml-sequence-diagrams-using-plantuml","result":{"data":{"site":{"siteMetadata":{"title":"kevinhakanson.com","author":"Kevin Hakanson"}},"markdownRemark":{"id":"5131d331-c40c-5a02-8611-845bd3695a19","excerpt":"I’ve blogged before about text notation for UML Sequence Diagrams in WebSequenceDiagrams notation, but since we standardize on Lucidchart for diagrams, I found…","html":"<p>I’ve blogged before about text notation for UML Sequence Diagrams in <a href=\"../2016-03-01-websequencediagrams-notation\">WebSequenceDiagrams notation</a>, but since we standardize on Lucidchart for diagrams, I found they have <a href=\"https://lucidchart.zendesk.com/hc/en-us/articles/208029986\">UML Sequence Markup</a> support as well.  However, Lucidchart’s dialect looks to be based on <a href=\"http://plantuml.com/index\">PlantUML</a>.  For a better summary that I can provide, take please read <a href=\"https://blog.anoff.io/2018-07-31-diagrams-with-plantuml/\">Markdown native diagrams with PlantUML</a>.  I decided to spin up the PlantUML docker image and take a look:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run -d -p 8080:8080 plantuml/plantuml-server:jetty</code></pre></div>\n<p>Because I love serverless, I used my ”<a href=\"https://en.wiktionary.org/wiki/Google-fu\">google-fu</a>” and found <a href=\"https://serverlessrepo.aws.amazon.com/applications/arn:aws:serverlessrepo:us-east-1:293246570391:applications~plantuml-render\">plantuml-render</a> in the AWS Serverless Application Repository.  You can also try this interactively at <a href=\"https://plantuml.nitorio.us/\">https://plantuml.nitorio.us/</a>.</p>\n<p>Even more exciting to me was that since I have Visual Studio Code support for both Markdown and <a href=\"https://marketplace.visualstudio.com/items?itemName=jebbs.plantuml\">PlantUML</a>, this fenced code block rendered an image as expected.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```plantuml\r\ntitle call flows  \r\n\r\nparticipant a as \"Aa\"\r\nparticipant b as \"Bb\"\r\nparticipant c as \"Cc\"\r\nparticipant d as \"Dd\"\r\n\r\na->b: sync call  \r\nactivate b\r\nb->b: in process call\r\nb->>c: async call  \r\nactivate c  \r\nc-->b: 202 Accepted  \r\na&lt;--b: return value  \r\ndeactivate b\r\nc->d: background process  \r\nd->d:\r\nc&lt;--d:\r\ndeactivate c\r\n```</code></pre></div>\n<p><img src=\"/ab627c94e2e5362edd11a8efd45eb426/callflows.svg\" alt=\"UML Sequence Diagram\" title=\"call flows\"></p>\n<p>Later, I am going to think about the best way to check in this text-based UML next to our source code.  I haven’t figured out if the rendered images should be checked in as well, generated as part of a build, or just viewed as part of a markdown preview.</p>","frontmatter":{"title":"UML Sequence Diagrams using PlantUML","description":null,"date":"June 9, 2019","tags":["uml"],"canonical":null}}},"pageContext":{"slug":"/2019-06-09-uml-sequence-diagrams-using-plantuml","previous":{"fields":{"slug":"/2019-05-23-aws-tag-keys-with-spaces-problems"},"frontmatter":{"tags":["aws","cli","ux","codequality"]}},"next":{"fields":{"slug":"/2019-06-14-programmatically-adding-ip-restrictions-to-an-azure-app-service"},"frontmatter":{"tags":["security","azure","powershell","cloudshell"]}}}},"staticQueryHashes":["2589769190","97908498"]}