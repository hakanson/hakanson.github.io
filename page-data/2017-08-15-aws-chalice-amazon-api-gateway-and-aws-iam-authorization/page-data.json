{"componentChunkName":"component---src-templates-blog-post-js","path":"/2017-08-15-aws-chalice-amazon-api-gateway-and-aws-iam-authorization","result":{"data":{"site":{"siteMetadata":{"title":"kevinhakanson.com","author":"Kevin Hakanson"}},"markdownRemark":{"id":"ca806b77-6b97-5880-9aa6-dfe2475f9eac","excerpt":"I’ve wanted to take a hands-on look at Amazon API Gateway and the recent 1.0 release of aws/chalice: Python Serverless Microframework for AWS pushed me over the…","html":"<p>I’ve wanted to take a hands-on look at <a href=\"https://aws.amazon.com/api-gateway/\">Amazon API Gateway</a> and the recent 1.0 release of <a href=\"https://github.com/aws/chalice\">aws/chalice: Python Serverless Microframework for AWS</a> pushed me over the edge.</p>\n<blockquote>\n<p>The python serverless microframework for AWS allows you to quickly create and deploy applications that use Amazon API Gateway and AWS Lambda.</p>\n</blockquote>\n<p>Since I am using the <a href=\"https://docs.continuum.io/anaconda/\">Anaconda Distribution</a> of Python, I needed to consult <a href=\"https://conda.io/docs/using/envs.html\">Managing environments — Conda documentation</a> for setting things up without using <a href=\"https://virtualenv.pypa.io/en/stable/\">virtualenv</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ conda create --name chalice <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3</span>\n$ <span class=\"token builtin class-name\">source</span> activate chalice\n$ pip <span class=\"token function\">install</span> chalice\n$ chalice new-project helloworld</code></pre></div>\n<p>A simple <code class=\"language-text\">app.py</code> file was created for me…</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> chalice <span class=\"token keyword\">import</span> Chalice\n\napp <span class=\"token operator\">=</span> Chalice<span class=\"token punctuation\">(</span>app_name<span class=\"token operator\">=</span><span class=\"token string\">'helloworld'</span><span class=\"token punctuation\">)</span>\n\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>…which I was able to easily deploy to our AWS account.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ chalice deploy\nInitial creation of lambda function.\nCreating role\nCreating deployment package.\nInitiating first <span class=\"token function\">time</span> deployment<span class=\"token punctuation\">..</span>.\nDeploying to: api\nhttps://fw7xjo57bc.execute-api.us-east-1.amazonaws.com/api/</code></pre></div>\n<p>I tested with curl and got the result I was expecting.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> https://fw7xjo57bc.execute-api.us-east-1.amazonaws.com/api/\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"hello\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, this was now publicly exposed and I don’t want everyone to know about “Hello World”.  It was time to consult the documentation on how to secure my new API:</p>\n<ul>\n<li><a href=\"http://docs.aws.amazon.com/cli/latest/reference/apigateway/\">apigateway — AWS CLI 1.11.134 Command Reference</a> </li>\n<li><a href=\"http://botocore.readthedocs.io/en/latest/reference/services/apigateway.html\">APIGateway — botocore 1.6.2 documentation</a> </li>\n</ul>\n<p>I needed the <code class=\"language-text\">resource-id</code> of my GET method to add an authorizationType of <code class=\"language-text\">AWS_IAM</code> so only a valid AWS user in this account could call my API.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws apigateway get-resources --rest-api-id fw7xjo57bc\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"items\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"9y11coidb1\"</span>,\n            <span class=\"token string\">\"path\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/\"</span>,\n            <span class=\"token string\">\"resourceMethods\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"GET\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n$ aws apigateway update-method <span class=\"token punctuation\">\\</span>\n  --rest-api-id fw7xjo57bc <span class=\"token punctuation\">\\</span>\n  --resource-id 9y11coidb1 <span class=\"token punctuation\">\\</span>\n  --http-method GET <span class=\"token punctuation\">\\</span>\n  --patch-operations <span class=\"token assign-left variable\">op</span><span class=\"token operator\">=</span><span class=\"token string\">\"replace\"</span>,path<span class=\"token operator\">=</span><span class=\"token string\">\"/authorizationType\"</span>,value<span class=\"token operator\">=</span><span class=\"token string\">\"AWS_IAM\"</span></code></pre></div>\n<p>But this didn’t work right away, so I had to deploy my changes before my curl was rejected.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws apigateway create-deployment --rest-api-id fw7xjo57bc --stage-name api\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"5pr2ed\"</span>,\n    <span class=\"token string\">\"createdDate\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1502815254</span>\n<span class=\"token punctuation\">}</span>\n\n$ <span class=\"token function\">curl</span> https://fw7xjo57bc.execute-api.us-east-1.amazonaws.com/api/\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Missing Authentication Token\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>The docs for <a href=\"http://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html\">Signing AWS API Requests</a> had <a href=\"http://docs.aws.amazon.com/general/latest/gr/sigv4-signed-request-examples.html#sig-v4-examples-get-auth-header\">Examples of the Complete Version 4 Signing Process (Python)</a> but they weren’t working for me, so I used <a href=\"https://github.com/jmenga/requests-aws-sign\">jmenga/requests-aws-sign: This package allows for AWS V4 request signing using the Python requests library</a> instead.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> requests\n$ pip <span class=\"token function\">install</span> requests_aws_sign</code></pre></div>\n<p>Since naming things is hard, I created <code class=\"language-text\">fw7xjo57bc.py</code> to make the signed request.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> requests_aws_sign <span class=\"token keyword\">import</span> AWSV4Sign\n<span class=\"token keyword\">from</span> boto3 <span class=\"token keyword\">import</span> session\n\nsession <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncredentials <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>get_credentials<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nregion <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>region_name <span class=\"token keyword\">or</span> <span class=\"token string\">'us-east-1'</span>\nservice <span class=\"token operator\">=</span> <span class=\"token string\">'execute-api'</span>\n\nurl <span class=\"token operator\">=</span> <span class=\"token string\">\"https://fw7xjo57bc.execute-api.us-east-1.amazonaws.com/api/\"</span>\nauth <span class=\"token operator\">=</span> AWSV4Sign<span class=\"token punctuation\">(</span>credentials<span class=\"token punctuation\">,</span> region<span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">)</span>\nresponse <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> auth<span class=\"token operator\">=</span>auth<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span></code></pre></div>\n<p>It works!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python3 fw7xjo57bc.py \n<span class=\"token punctuation\">{</span><span class=\"token string\">\"hello\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>I then set authorizationType back to NONE, deployed, and tested again.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws apigateway update-method <span class=\"token punctuation\">\\</span>\n  --rest-api-id fw7xjo57bc <span class=\"token punctuation\">\\</span>\n  --resource-id 9y11coidb1 <span class=\"token punctuation\">\\</span>\n  --http-method GET <span class=\"token punctuation\">\\</span>\n  --patch-operations <span class=\"token assign-left variable\">op</span><span class=\"token operator\">=</span><span class=\"token string\">\"replace\"</span>,path<span class=\"token operator\">=</span><span class=\"token string\">\"/authorizationType\"</span>,value<span class=\"token operator\">=</span><span class=\"token string\">\"NONE\"</span>\n\n$ aws apigateway create-deployment --rest-api-id fw7xjo57bc --stage-name api\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"xxtj1w\"</span>,\n    <span class=\"token string\">\"createdDate\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1502816441</span>\n<span class=\"token punctuation\">}</span>\n\n$ <span class=\"token function\">curl</span> https://fw7xjo57bc.execute-api.us-east-1.amazonaws.com/api/\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"hello\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using an <code class=\"language-text\">authorizationType</code> of <code class=\"language-text\">AWS_IAM</code> is only interesting for more “internal” or “infrastructure” APIs.  Most cases where API Gateway come up is for customer-facing, external API which needs either API Keys for <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html\">Usage Plans</a> or <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/use-custom-authorizer.html\">Custom Authorizers</a>.</p>\n<p>Lastly, it was also just as easy to clean up after myself</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ chalice delete\nDeleting rest API fw7xjo57bc\nDeleting lambda <span class=\"token keyword\">function</span> helloworld-dev\nDelete the role helloworld-dev? <span class=\"token punctuation\">[</span>y/N<span class=\"token punctuation\">]</span>: y\nDeleting role name helloworld-dev</code></pre></div>","frontmatter":{"title":"AWS Chalice, Amazon API Gateway, and AWS IAM Authorization","date":"August 15, 2017","tags":["aws","iam","python","api"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2017-08-15-aws-chalice-amazon-api-gateway-and-aws-iam-authorization","previous":{"fields":{"slug":"/2017-08-08-the-frozen-caveman-antipattern"},"frontmatter":{"tags":["career"]}},"next":{"fields":{"slug":"/2017-08-24-amazon-rds-and-iam-policy-notes"},"frontmatter":{"tags":["aws","iam","rds"]}}}}}