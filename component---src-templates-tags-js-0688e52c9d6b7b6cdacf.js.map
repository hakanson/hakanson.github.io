{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","title","site","siteMetadata","tagHeader","location","style","display","flexWrap","justifyContent","listStyle","padding","marginBottom","to","map","node","slug","fields","frontmatter","date","tags","key","rhythm","pageQuery"],"mappings":"2FAAA,kJAqGeA,UA1FF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IAD8B,EAERD,EAAKE,kBAA3BC,EAF8B,EAE9BA,MAAOC,EAFuB,EAEvBA,WACPC,EAAUL,EAAKM,KAAKC,aAApBF,MACFG,EAAeJ,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,YAEHH,EAEZ,OACE,kBAAC,IAAD,CAAQQ,SAAQ,SAAWR,EAAOI,MAAOA,GACzC,kBAAC,IAAD,CAAKA,MAAK,IAAMJ,IAChB,6BACE,wBACES,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,EACTC,aAAc,IAGhB,4BACA,kBAAC,OAAD,CAAMC,GAAG,KAAT,gBAEA,4BACA,kBAAC,OAAD,CAAMA,GAAG,SAAT,iBAIJ,6BACE,4BAAKT,GACL,4BACGL,EAAMe,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KADe,EAEOD,EAAKG,YAA3BjB,EAFe,EAEfA,MAAOkB,EAFQ,EAERA,KAAMC,EAFE,EAEFA,KACrB,OACE,wBAAIC,IAAKL,GACP,kBAAC,OAAD,CAAMH,GAAIG,GAAOf,GACjB,6BACCkB,EACD,kBAAC,IAAD,CAAUC,KAAMA,UAMxB,wBACEd,MAAO,CACLM,aAAcU,YAAO,MAGzB,gCACE,kBAAC,IAAD,SAuCD,IAAMC,EAAS","file":"component---src-templates-tags-js-0688e52c9d6b7b6cdacf.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\n// Components\r\nimport { Link, graphql } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport Hashtags from \"../components/hashtags\"\r\nimport Bio from \"../components/bio\"\r\nimport { rhythm } from \"../utils/typography\"\r\n\r\nconst Tags = ({ pageContext, data }) => {\r\n  const { tag } = pageContext\r\n  const { edges, totalCount } = data.allMarkdownRemark\r\n  const { title } = data.site.siteMetadata\r\n  const tagHeader = `${totalCount} post${\r\n    totalCount === 1 ? \"\" : \"s\"\r\n  } tagged #${tag}`\r\n\r\n  return (\r\n    <Layout location={`/tags/${tag}`} title={title}>\r\n    <SEO title={`#${tag}`} />\r\n    <nav>\r\n      <ul\r\n        style={{\r\n          display: `flex`,\r\n          flexWrap: `wrap`,\r\n          justifyContent: `space-between`,\r\n          listStyle: `none`,\r\n          padding: 0,\r\n          marginBottom: 0,\r\n        }}\r\n      >\r\n        <li>\r\n        <Link to=\"/\">← All Posts</Link>\r\n        </li>\r\n        <li>\r\n        <Link to=\"/tags\">All Tags →</Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n    <div>\r\n      <h1>{tagHeader}</h1>\r\n      <ol>\r\n        {edges.map(({ node }) => {\r\n          const { slug } = node.fields\r\n          const { title, date, tags } = node.frontmatter\r\n          return (\r\n            <li key={slug}>\r\n              <Link to={slug}>{title}</Link>\r\n              <br></br>\r\n              {date}\r\n              <Hashtags tags={tags} />\r\n            </li>\r\n          )\r\n        })}\r\n      </ol>\r\n    </div>\r\n      <hr\r\n        style={{\r\n          marginBottom: rhythm(1),\r\n        }}\r\n      />\r\n      <footer>\r\n        <Bio />\r\n      </footer>\r\n\r\n\r\n    </Layout>\r\n  )\r\n}\r\n\r\nTags.propTypes = {\r\n    pageContext: PropTypes.shape({\r\n        tag: PropTypes.string.isRequired,\r\n    }),\r\n    data: PropTypes.shape({\r\n        allMarkdownRemark: PropTypes.shape({\r\n            totalCount: PropTypes.number.isRequired,\r\n            edges: PropTypes.arrayOf(\r\n                PropTypes.shape({\r\n                    node: PropTypes.shape({\r\n                        frontmatter: PropTypes.shape({\r\n                            title: PropTypes.string.isRequired,\r\n                            date: PropTypes.string.isRequired,\r\n                        }),\r\n                        fields: PropTypes.shape({\r\n                            slug: PropTypes.string.isRequired,\r\n                        }),\r\n                    }),\r\n                }).isRequired\r\n            ),\r\n        }),\r\n        site: PropTypes.shape({\r\n            siteMetadata: PropTypes.shape({\r\n                title: PropTypes.string.isRequired,\r\n            }),\r\n        }),\r\n    }),\r\n}\r\n\r\nexport default Tags\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    site {\r\n        siteMetadata {\r\n          title\r\n        }\r\n      }\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            tags\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`"],"sourceRoot":""}