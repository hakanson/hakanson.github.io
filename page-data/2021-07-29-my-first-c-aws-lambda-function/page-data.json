{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2021-07-29-my-first-c-aws-lambda-function",
    "result": {"data":{"site":{"siteMetadata":{"title":"kevinhakanson.com","author":"Kevin Hakanson"}},"markdownRemark":{"id":"804203a2-5af7-55ec-9207-d03fa79d8401","excerpt":"Here it is - my very first AWS Lambda Function coded in C#. You can probably guess I didn’t write that code, but generated it from a template.  There is .NET…","html":"<p>Here it is - my very first AWS Lambda Function coded in C#.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Amazon<span class=\"token punctuation\">.</span>Lambda<span class=\"token punctuation\">.</span>Core</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Amazon<span class=\"token punctuation\">.</span>Lambda<span class=\"token punctuation\">.</span>APIGatewayEvents</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">LambdaSerializer</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Amazon<span class=\"token punctuation\">.</span>Lambda<span class=\"token punctuation\">.</span>Serialization<span class=\"token punctuation\">.</span>SystemTextJson<span class=\"token punctuation\">.</span>DefaultLambdaJsonSerializer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">MyFirstCsharpLambda</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Functions</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Default constructor that Lambda will invoke.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">Functions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// A Lambda function to respond to HTTP Get methods from API Gateway</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"request\">&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns>The API Gateway response.&lt;/returns></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">APIGatewayProxyResponse</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">APIGatewayProxyRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ILambdaContext</span> context<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            context<span class=\"token punctuation\">.</span>Logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get Request\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">APIGatewayProxyResponse</span>\n            <span class=\"token punctuation\">{</span>\n                StatusCode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>HttpStatusCode<span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">,</span>\n                Body <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello AWS Serverless\"</span><span class=\"token punctuation\">,</span>\n                Headers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can probably guess I didn’t write that code, but generated it from a template.  There is <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/csharp-package-cli.html\">.NET Core CLI</a> support for creating .NET-based Lambda applications.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ dotnet tool <span class=\"token function\">install</span> -g Amazon.Lambda.Tools\n$ dotnet new -i Amazon.Lambda.Templates\n$ dotnet new serverless.EmptyServerless --name MyFirstCsharpLambda</code></pre></div>\n<p>Most of my Lambda functions have been JavaScript/Node.js where I am processing the fields on a loosely types <code class=\"language-text\">event</code> object, so it was nice to see the <code class=\"language-text\">LambdaSerializer</code> helps create strongly typed <code class=\"language-text\">APIGatewayProxyRequest</code> and <code class=\"language-text\">APIGatewayProxyResponse</code> objects to understand the event payload.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">APIGatewayProxyResponse</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">APIGatewayProxyRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ILambdaContext</span> context<span class=\"token punctuation\">)</span></code></pre></div>\n<p>I used to code C# using Visual Studio on Windows Desktop and run under IIS on Windows Server, and now my C# development uses Visual Studio Code on macOS and runs on AWS Lambda on Linux.</p>","frontmatter":{"title":"My first C# AWS Lambda Function","description":null,"date":"June 30, 2021","tags":["aws","lambda","csharp","dotnet"],"canonical":null}}},"pageContext":{"slug":"/2021-07-29-my-first-c-aws-lambda-function","previous":{"fields":{"slug":"/2021-03-22-its-day-1-at-aws"},"frontmatter":{"tags":["career","aws"]}},"next":{"fields":{"slug":"/2021-06-30-aws-cloudformation-linter-custom-rules"},"frontmatter":{"tags":["aws","cloudformation"]}}}},
    "staticQueryHashes": ["2589769190","97908498"]}