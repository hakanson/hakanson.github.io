{"componentChunkName":"component---src-templates-blog-post-js","path":"/2025-05-25-redacting-tokens-in-lambda-function-events/","result":{"data":{"site":{"siteMetadata":{"title":"kevinhakanson.com","author":"Kevin Hakanson"}},"markdownRemark":{"id":"383d0b39-c979-5441-bab8-74fb0fae2011","excerpt":"When I write an AWS Lambda function in JavaScript/TypeScript that takes some sort of auth token in the , I take care to redact it from any logs.  The code belowâ€¦","html":"<p>When I write an AWS Lambda function in JavaScript/TypeScript that takes some sort of auth token in the <code class=\"language-text\">event</code>, I take care to redact it from any logs.  The code below is similar to what I use, using the <code class=\"language-text\">replacer</code> parameter of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">JSON.stringify</a> to replace the actual token with the string <strong>[REDACTED]</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>\n        event<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token string\">'authToken'</span><span class=\"token punctuation\">)</span>\n              <span class=\"token keyword\">return</span> <span class=\"token string\">'[REDACTED]'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I recently needed similar functionality for a Python-based Lambda function and used Python JSON <a href=\"https://docs.python.org/3/library/json.html#encoders-and-decoders\">Encoders and Decoders</a>.  I create a <code class=\"language-text\">RedactedEncoder</code> class of my own to use like <code class=\"language-text\">print(json.dumps(event, cls=RedactedEncoder))</code>.  Below is my version of the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">RedactedEncoder</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>JSONEncoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">iterencode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">,</span> _one_shot<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        processed_obj <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_process_object<span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>iterencode<span class=\"token punctuation\">(</span>processed_obj<span class=\"token punctuation\">,</span> _one_shot<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_process_object</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\"># avoid modifying the original</span>\n            <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> key <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'authToken'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"[REDACTED]\"</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_process_object<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> result\n        <span class=\"token keyword\">elif</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>_process_object<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> obj</code></pre></div>\n<p>Note, there are some sharp edges if your object contains properties that are not JSON serializable (like Decimal), so look at adding <code class=\"language-text\">default=str</code> to your <code class=\"language-text\">json.dumps</code> call.</p>","frontmatter":{"title":"Redacting tokens in Lambda function events","description":null,"date":"May 25, 2025","tags":["javascript","python","security","aws","lambda"],"canonical":null}}},"pageContext":{"slug":"/2025-05-25-redacting-tokens-in-lambda-function-events/","previous":{"fields":{"slug":"/2025-03-29-vibe-architecting-an-api-gateway-http-api/"},"frontmatter":{"tags":["aws","http","security"]}},"next":null}},"staticQueryHashes":["2589769190","97908498"],"slicesMap":{}}