{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-08-22-investigating-web-cache-poisoning","webpackCompilationHash":"2ff2dae5022005648504","result":{"data":{"site":{"siteMetadata":{"title":"kevinhakanson.com","author":"Kevin Hakanson"}},"markdownRemark":{"id":"c733f4fe-4ab0-534b-b4f7-af7a99101be7","excerpt":"Practical Web Cache Poisoning had me wondering about  header validation in one application I was consulting on.  I decided to test against an internal endpoint…","html":"<p><a href=\"https://portswigger.net/blog/practical-web-cache-poisoning\">Practical Web Cache Poisoning</a> had me wondering about <code class=\"language-text\">Host</code> header validation in one application I was consulting on.  I decided to test against an internal endpoint that reflects back HTTP headers. I used <code class=\"language-text\">curl</code>’s <a href=\"https://curl.haxx.se/docs/manpage.html#-H\">-H</a> to lie about my <code class=\"language-text\">Host</code> and <code class=\"language-text\">X-Forwarded-*</code> headers and routed through an internal proxy server.</p>\n<p><em>Note: For these examples I replaced the real hostname with the reserved <code class=\"language-text\">example.com</code> from <a href=\"https://tools.ietf.org/html/rfc6761\">Special-Use Domain Names</a>.</em></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span>  -H <span class=\"token string\">\"Host: poison0.example.com\"</span> -H <span class=\"token string\">\"X-Forwarded-Host: poison1.example.com\"</span> <span class=\"token punctuation\">\\</span>\n-H <span class=\"token string\">\"X-Forwarded-For: 1.1.1.1\"</span> -H <span class=\"token string\">\"X-Forwarded-Proto: ftp\"</span> -H <span class=\"token string\">\"X-Forwarded-Port: 8080\"</span> <span class=\"token punctuation\">\\</span>\n--proxy <span class=\"token number\">10.20</span>.30.40:5678 https://ci.int.example.com/api/internalsecurity/v1/requests\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"headers\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"x-amzn-trace-id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Root=1-5b7db1ca-321c6f7616980480e520feb6\"</span>,\n        <span class=\"token string\">\"x-forwarded-host\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"poison0.example.com\"</span>,\n        <span class=\"token string\">\"x-forwarded-proto\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https\"</span>,\n        <span class=\"token string\">\"host\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"poison0.example.com\"</span>,\n        <span class=\"token string\">\"x-forwarded-port\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"443\"</span>,\n        <span class=\"token string\">\"connection\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"close\"</span>,\n        <span class=\"token string\">\"x-forwarded-for\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1.1.1.1, 10.20.30.40\"</span>,\n        <span class=\"token string\">\"user-agent\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"curl/7.58.0\"</span>,\n        <span class=\"token string\">\"accept\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"*/*\"</span>\n    <span class=\"token punctuation\">}</span>,\n    <span class=\"token string\">\"URI\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"http://poison0.example.com/api/internalsecurity/v1/requests\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The AWS Application Load Balancers allow the <code class=\"language-text\">Host</code> header to pass through and correctly set the <code class=\"language-text\">X-Forwarded-*</code> headers on to the target.  The value for <code class=\"language-text\">X-Forwarded-For</code> is a chain of values that was appended to</p>\n<p>Recently Amazon added “Redirect Rules” into Application Load Balancers and can preform the <code class=\"language-text\">www</code> to naked domain logic by matching on <code class=\"language-text\">Host</code> and triggering a redirect.  Additionally, you could require all load balancer targets to match a known hostname which has the effect of Host validation.  The load balancer is already indirectly aware of hostnames by the fact it has a TLS Certificate configured containing numerous <code class=\"language-text\">subjectAltName</code> DNS entries.</p>\n<p>However, is it “better” to validate the <code class=\"language-text\">Host</code> by leveraging the virtual host functionality of <code class=\"language-text\">nginx.conf</code>?  This is already the place where the <code class=\"language-text\">Host</code> header value is copied to the <code class=\"language-text\">X-Forwarded-Host</code> header.   However, it may require specific <code class=\"language-text\">nginx.conf</code> files for each environment and regional deploy.</p>\n<div class=\"gatsby-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">server_name</span> www<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">301</span> <span class=\"token variable\">$scheme</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>example<span class=\"token punctuation\">.</span>com<span class=\"token variable\">$request_uri</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">server_name</span> example<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># [...]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"http://nginx.org/en/docs/http/server_names.html\">Server names</a> from the nginx docs documents the strange name <code class=\"language-text\">_</code> which is “just one of a myriad of invalid domain names which never intersect with any real name.”</p>\n<div class=\"gatsby-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\">    <span class=\"token comment\"># This is the default server that will 444 on requests that do not</span>\n    <span class=\"token comment\"># have an acceptable host name as defined in external_domains.conf</span>\n    <span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">listen</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">server_name</span> _<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">444</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">listen</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">include</span> <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>external_domains<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\"># [...]</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>In <code class=\"language-text\">external_domains.conf</code>, all the allowable <code class=\"language-text\">server_name</code>s are listed.</p>\n<div class=\"gatsby-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">server_name</span> example<span class=\"token punctuation\">.</span>com\n    example<span class=\"token punctuation\">.</span>net\n    example<span class=\"token punctuation\">.</span>org</code></pre></div>\n<p>This configured worked in that it rejected “unwanted” <code class=\"language-text\">Host</code> headers.</p>","frontmatter":{"title":"Investigating Web Cache Poisoning","date":"August 22, 2018","tags":["http","caching","security"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018-08-22-investigating-web-cache-poisoning","previous":{"fields":{"slug":"/2018-07-05-first-thoughts-on-aws-cloud9"},"frontmatter":{"tags":["aws","cloud9","python"]}},"next":{"fields":{"slug":"/2018-08-31-aws-waf-aws-shield-for-ddos-protection"},"frontmatter":{"tags":["aws","waf","security"]}}}}}