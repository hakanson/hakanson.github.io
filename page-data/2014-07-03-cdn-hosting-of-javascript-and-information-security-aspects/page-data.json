{"componentChunkName":"component---src-templates-blog-post-js","path":"/2014-07-03-cdn-hosting-of-javascript-and-information-security-aspects/","result":{"data":{"site":{"siteMetadata":{"title":"kevinhakanson.com","author":"Kevin Hakanson"}},"markdownRemark":{"id":"33e0553b-e3c9-5b26-a164-cba8d3d7348b","excerpt":"During the last Front-End group call, we were discussing JavaScript combination/minification when the topic of using a Content Delivery Network (CDN) came up…","html":"<p>During the last Front-End group call, we were discussing JavaScript combination/minification when the topic of using a <a href=\"http://en.wikipedia.org/wiki/Content_delivery_network\">Content Delivery Network</a> (CDN) came up.  This is a well-known performance “best practice” on the internet, but I mentioned it comes with some interesting information security concerns.  It looks something like this:</p>\n<blockquote>\n<p><code class=\"language-text\">&lt;script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\">&lt;/script></code></p>\n</blockquote>\n<p>For those new to the topic, you can find many blog posts detailing this strategy.  For example, take a look at <a href=\"http://encosia.com/3-reasons-why-you-should-let-google-host-jquery-for-you/\">3 reasons why you should let Google host jQuery for you</a>.  Since this article mentions jQuery and not AngularJS, I’m going to continue to use jQuery for this discussion.  The author asserts that:</p>\n<blockquote>\n<p>Doing so has several advantages over hosting jQuery on your server(s): <strong>decreased latency</strong>, <strong>increased parallelism</strong>, and <strong>better caching</strong>.</p>\n</blockquote>\n<p>Let me summarize these points with some more quotes from that article:</p>\n<ul>\n<li><strong>decreased latency</strong> - “automatically target the closest available server in the network” so the user “will be able to download jQuery faster”</li>\n<li><strong>increased parallelism</strong> - “doesn’t make a gigantic difference for users with a six concurrent connection browser”</li>\n<li><strong>better caching</strong> - “if someone visits hundreds of sites using the same Google hosted version of jQuery, they will only need download it once!”</li>\n</ul>\n<p>The jQuery site itself mentions <a href=\"http://jquery.com/download/#using-jquery-with-a-cdn\">Using jQuery with a CDN</a> including listing several CDNs that host jQuery.</p>\n<blockquote>\n<p>CDNs can offer a performance benefit by hosting jQuery on servers spread across the globe. This also offers an advantage that if the visitor to your webpage has already downloaded a copy of jQuery from the same CDN, it won’t have to be re-downloaded.</p>\n</blockquote>\n<p>I am going to differentiate using a public, free CDN like <a href=\"http://code.jquery.com/\">jQuery CDN</a> or <a href=\"https://developers.google.com/speed/libraries/devguide#jquery\">Google Hosted Libraries</a> from using a paid product like <a href=\"http://www.akamai.com/html/solutions/dynamic-site-accelerator.html\">Dynamic Site Accelerator</a> from Akamai.  With the latter, you have an established business relationship that has been vetted around topics like uptime/SLA and security reviews.</p>\n<p>From an information security perspective, here are some items to consider:</p>\n<ol>\n<li>Isn’t CDN hosting logically just another one of the <a href=\"https://www.owasp.org/index.php/Types_of_Cross-Site_Scripting\">Types of Cross-Site Scripting</a>?  Yes, it is true that you injected the script yourself, but it is still loading a remote executable that has access to your data.  What if the CDN gets hacked?</li>\n<li>Not hosting the source code yourself means it may not be included in any static source code scanning performed on your build (like Veracode).</li>\n<li>You implicitly accept any <a href=\"https://developers.google.com/speed/libraries/terms\">Termgenerals of Service</a> for your users, including any user or IP address tracking.  Is this compatible with your product’s terms of service?</li>\n<li>The <a href=\"http://jquery.com/download/#other-cdns\">Other CDNs</a> section on the jQuery site states “there may be delays between a jQuery release and its availability there”, which means if you have to push out a security fix, you need to wait for the CDN to deploy.</li>\n<li>The <a href=\"https://plus.google.com/+IlyaGrigorik/posts/N8dDov8vWcM\">jQuery CDN HTTPS certificate expired on July 31</a> and caused a short outage.  So, in addition to not being in control of the code that is hosted, you don’t have control over if the site is functional or not.</li>\n</ol>\n<p>In general, I like the idea of free hosting.  For a personal blog, where users may quickly pop in to read a post and maybe never come back, they serve an important purpose.  In fact, many of these CDNs have excellent operational and security characteristics.  However, for a paid product where we are trusted with the privacy of their data, these are essential points to consider.  I wouldn’t recommend a free CDN for the projects I am working on, but “your mileage may vary” so understand the risks vs. the rewards before taking general advice from the internet.</p>","frontmatter":{"title":"CDN Hosting of JavaScript and Information Security Aspects","description":null,"date":"July 3, 2014","tags":["javascript","security","webdev"],"canonical":null}}},"pageContext":{"slug":"/2014-07-03-cdn-hosting-of-javascript-and-information-security-aspects/","previous":{"fields":{"slug":"/2014-07-03-page-visibility-api/"},"frontmatter":{"tags":["javascript","ux","angularjs"]}},"next":{"fields":{"slug":"/2014-07-31-reimagining-cobaltjs-preferences-in-angularjs-using-uml/"},"frontmatter":{"tags":["javascript","architecture","uml"]}}}},"staticQueryHashes":["2589769190","97908498"],"slicesMap":{}}