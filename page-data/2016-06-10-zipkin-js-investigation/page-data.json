{"componentChunkName":"component---src-templates-blog-post-js","path":"/2016-06-10-zipkin-js-investigation","webpackCompilationHash":"f141a48750e2a6a883f2","result":{"data":{"site":{"siteMetadata":{"title":"kevinhakanson.com","author":"Kevin Hakanson"}},"markdownRemark":{"id":"effc75df-19bb-52c7-9ede-f28f8f69e806","excerpt":"To better understand the concepts behind Zipkin, I took a look at Zipkin JS (a Zipkin instrumentation implementation for Node.js), including submitting Pull…","html":"<p>To better understand the concepts behind <a href=\"http://zipkin.io/\">Zipkin</a>, I took a look at <a href=\"https://github.com/openzipkin/zipkin-js\">Zipkin JS</a> (a Zipkin instrumentation implementation for Node.js), including submitting <a href=\"https://github.com/openzipkin/zipkin-js/pull/10\">Pull Request #10</a> and <a href=\"https://github.com/openzipkin/zipkin-js/issues/11\">Issue #11</a> to that project.</p>\n<p>I wrote this (ugly but) simple Node.js Express app that recursively calls itself after decrementing a count value.  I thought this was an easy way to generate a distributed trace tree of arbitrary depth.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>Tracer<span class=\"token punctuation\">,</span> ExplicitContext<span class=\"token punctuation\">,</span> ConsoleRecorder<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zipkin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> zipkinMiddleware <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zipkin-instrumentation-express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>expressMiddleware<span class=\"token punctuation\">;</span>  \n  \n<span class=\"token keyword\">const</span> fetch <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node-fetch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> wrapFetch <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zipkin-instrumentation-fetch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n<span class=\"token keyword\">const</span> ctxImpl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExplicitContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> recorder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsoleRecorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> tracer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tracer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>ctxImpl<span class=\"token punctuation\">,</span> recorder<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// configure your tracer properly here  </span>\n  \n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \napp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'port'</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \napp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'servicename'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'helloservice'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n<span class=\"token comment\">// Add the Zipkin middleware  </span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">zipkinMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>  \n  tracer<span class=\"token punctuation\">,</span>  \n  serviceName<span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'servicename'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// name of this application  </span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n<span class=\"token keyword\">const</span> zipkinFetch <span class=\"token operator\">=</span> <span class=\"token function\">wrapFetch</span><span class=\"token punctuation\">(</span>fetch<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>tracer<span class=\"token punctuation\">,</span> serviceName<span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'servicename'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n<span class=\"token punctuation\">[</span><span class=\"token string\">\"log\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"warn\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">method</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">var</span> oldMethod <span class=\"token operator\">=</span> console<span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    console<span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tracer<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>  \n        <span class=\"token function\">oldMethod</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>  \n            console<span class=\"token punctuation\">,</span>  \n            arguments  \n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>count <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">count = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:'</span> <span class=\"token operator\">+</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'port'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/?count='</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">calling </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">zipkinFetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  \n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fetchres</span> <span class=\"token operator\">=></span> fetchres<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello World! (x</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  \n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ex</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>    \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'port'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Example app listening on port '</span> <span class=\"token operator\">+</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'port'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </code></pre></div>\n<p>When I call it like this (explicitly passing in a TraceId and SpanId)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -H &quot;X-B3-TraceId: 1234567890abcdef&quot; -H &quot;X-B3-SpanId: 1234567890abcdef&quot; http://localhost:8001/?count=3</code></pre></div>\n<p>I get this result</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hello World! (x3)\nHello World! (x2)\nHello World!</code></pre></div>\n<p>and see this on the Node.js console as a result of my both <code class=\"language-text\">console.log</code> calls and the configured <code class=\"language-text\">ConsoleRecorder</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">TraceId(spanId=977a88d5c9febc13, parentId=977a88d5c9febc13, traceId=977a88d5c9febc13) Example app listening on port 8001  \nRecord at (spanId=1234567890abcdef, parentId=1234567890abcdef, traceId=1234567890abcdef): ServiceName(&quot;myservice1&quot;)  \nRecord at (spanId=1234567890abcdef, parentId=1234567890abcdef, traceId=1234567890abcdef): Rpc(&quot;GET&quot;)  \nRecord at (spanId=1234567890abcdef, parentId=1234567890abcdef, traceId=1234567890abcdef): BinaryAnnotation(http.url=&quot;http://localhost:8001/%3Fcount=3&quot;)  \nRecord at (spanId=1234567890abcdef, parentId=1234567890abcdef, traceId=1234567890abcdef): ServerRecv()  \nRecord at (spanId=1234567890abcdef, parentId=1234567890abcdef, traceId=1234567890abcdef): LocalAddr(host=&quot;InetAddress(10.212.146.110)&quot;, port=0)  \nTraceId(spanId=1234567890abcdef, parentId=1234567890abcdef, traceId=1234567890abcdef) count = 3  \nTraceId(spanId=1234567890abcdef, parentId=1234567890abcdef, traceId=1234567890abcdef) calling http://localhost:8001/?count=2  \nRecord at (spanId=94a8246c4c298188, parentId=1234567890abcdef, traceId=1234567890abcdef): ServiceName(&quot;myservice1&quot;)  \nRecord at (spanId=94a8246c4c298188, parentId=1234567890abcdef, traceId=1234567890abcdef): Rpc(&quot;GET&quot;)  \nRecord at (spanId=94a8246c4c298188, parentId=1234567890abcdef, traceId=1234567890abcdef): BinaryAnnotation(http.url=&quot;http://localhost:8001/?count=2&quot;)  \nRecord at (spanId=94a8246c4c298188, parentId=1234567890abcdef, traceId=1234567890abcdef): ClientSend()  \nRecord at (spanId=94a8246c4c298188, parentId=1234567890abcdef, traceId=1234567890abcdef): ServiceName(&quot;myservice1&quot;)  \nRecord at (spanId=94a8246c4c298188, parentId=1234567890abcdef, traceId=1234567890abcdef): Rpc(&quot;GET&quot;)  \nRecord at (spanId=94a8246c4c298188, parentId=1234567890abcdef, traceId=1234567890abcdef): BinaryAnnotation(http.url=&quot;http://localhost:8001/%3Fcount=2&quot;)  \nRecord at (spanId=94a8246c4c298188, parentId=1234567890abcdef, traceId=1234567890abcdef): ServerRecv()  \nRecord at (spanId=94a8246c4c298188, parentId=1234567890abcdef, traceId=1234567890abcdef): LocalAddr(host=&quot;InetAddress(10.212.146.110)&quot;, port=0)  \nTraceId(spanId=94a8246c4c298188, parentId=1234567890abcdef, traceId=1234567890abcdef) count = 2  \nTraceId(spanId=94a8246c4c298188, parentId=1234567890abcdef, traceId=1234567890abcdef) calling http://localhost:8001/?count=1  \nRecord at (spanId=9b550ac514a4af5, parentId=94a8246c4c298188, traceId=1234567890abcdef): ServiceName(&quot;myservice1&quot;)  \nRecord at (spanId=9b550ac514a4af5, parentId=94a8246c4c298188, traceId=1234567890abcdef): Rpc(&quot;GET&quot;)  \nRecord at (spanId=9b550ac514a4af5, parentId=94a8246c4c298188, traceId=1234567890abcdef): BinaryAnnotation(http.url=&quot;http://localhost:8001/?count=1&quot;)  \nRecord at (spanId=9b550ac514a4af5, parentId=94a8246c4c298188, traceId=1234567890abcdef): ClientSend()  \nRecord at (spanId=9b550ac514a4af5, parentId=94a8246c4c298188, traceId=1234567890abcdef): ServiceName(&quot;myservice1&quot;)  \nRecord at (spanId=9b550ac514a4af5, parentId=94a8246c4c298188, traceId=1234567890abcdef): Rpc(&quot;GET&quot;)  \nRecord at (spanId=9b550ac514a4af5, parentId=94a8246c4c298188, traceId=1234567890abcdef): BinaryAnnotation(http.url=&quot;http://localhost:8001/%3Fcount=1&quot;)  \nRecord at (spanId=9b550ac514a4af5, parentId=94a8246c4c298188, traceId=1234567890abcdef): ServerRecv()  \nRecord at (spanId=9b550ac514a4af5, parentId=94a8246c4c298188, traceId=1234567890abcdef): LocalAddr(host=&quot;InetAddress(10.212.146.110)&quot;, port=0)  \nTraceId(spanId=9b550ac514a4af5, parentId=94a8246c4c298188, traceId=1234567890abcdef) count = 1  \nRecord at (spanId=9b550ac514a4af5, parentId=94a8246c4c298188, traceId=1234567890abcdef): BinaryAnnotation(http.status_code=&quot;200&quot;)  \nRecord at (spanId=9b550ac514a4af5, parentId=94a8246c4c298188, traceId=1234567890abcdef): ServerSend()  \nRecord at (spanId=9b550ac514a4af5, parentId=94a8246c4c298188, traceId=1234567890abcdef): BinaryAnnotation(http.status_code=&quot;200&quot;)  \nRecord at (spanId=9b550ac514a4af5, parentId=94a8246c4c298188, traceId=1234567890abcdef): ClientRecv()  \nRecord at (spanId=94a8246c4c298188, parentId=1234567890abcdef, traceId=1234567890abcdef): BinaryAnnotation(http.status_code=&quot;200&quot;)  \nRecord at (spanId=94a8246c4c298188, parentId=1234567890abcdef, traceId=1234567890abcdef): ServerSend()  \nRecord at (spanId=94a8246c4c298188, parentId=1234567890abcdef, traceId=1234567890abcdef): BinaryAnnotation(http.status_code=&quot;200&quot;)  \nRecord at (spanId=94a8246c4c298188, parentId=1234567890abcdef, traceId=1234567890abcdef): ClientRecv()  \nRecord at (spanId=1234567890abcdef, parentId=1234567890abcdef, traceId=1234567890abcdef): BinaryAnnotation(http.status_code=&quot;200&quot;)  \nRecord at (spanId=1234567890abcdef, parentId=1234567890abcdef, traceId=1234567890abcdef): ServerSend()  </code></pre></div>\n<p>You can see the consistent TraceId for the request (<code class=\"language-text\">1234567890abcdef</code>) as well as the <code class=\"language-text\">1234567890abcdef</code> -> <code class=\"language-text\">94a8246c4c298188</code> -> <code class=\"language-text\">9b550ac514a4af5</code> lineage.  The <code class=\"language-text\">ConsoleRecorder</code> emitted the lines starting with “Record at” and I overloaded console methods to add the TraceId information.</p>\n<p>Instead of outputting to the console, I wanted to write to a Zipkin UI instance that could take reports over HTTP.  However, zipkin-js does not include a version of the Spring Cloud Slueth <a href=\"https://github.com/spring-cloud/spring-cloud-sleuth/blob/2e2c8b3e17cbef809abf350f4960acdf14618d16/spring-cloud-sleuth-zipkin/src/main/java/org/springframework/cloud/sleuth/zipkin/HttpZipkinSpanReporter.java\">HttpZipkinSpanReporter.java</a> or the Zipkin <a href=\"https://github.com/openzipkin/zipkin/blob/680170cf5ccce96d31cc3b6e1c1d430edf70e070/zipkin/src/main/java/zipkin/internal/JsonCodec.java\">JsonCodec.java</a> I need.</p>","frontmatter":{"title":"Zipkin JS Investigation","date":"June 10, 2016","tags":["javascript","api","monitoring"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2016-06-10-zipkin-js-investigation","previous":{"fields":{"slug":"/2016-05-03-introduction-to-speech-interfaces-for-web-applications"},"frontmatter":{"tags":["webdev","vui","conference"]}},"next":{"fields":{"slug":"/2016-07-11-pokemon-go-vs-certificate-pinning"},"frontmatter":{"tags":["http","security","pokemon"]}}}}}