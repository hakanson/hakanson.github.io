{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-06-27-selecting-an-elasticache-redis-auth-token","webpackCompilationHash":"2ff2dae5022005648504","result":{"data":{"site":{"siteMetadata":{"title":"kevinhakanson.com","author":"Kevin Hakanson"}},"markdownRemark":{"id":"b3179589-3394-57bb-af13-03ebb9489692","excerpt":"Redis Security highlights some items about selecting an AUTH token (password). It should be long enough to prevent brute force attacks for two reasons: Redis is…","html":"<p><a href=\"https://redis.io/topics/security\">Redis Security</a> highlights some items about selecting an AUTH token (password).</p>\n<blockquote>\n<p>It should be long enough to prevent brute force attacks for two reasons:</p>\n<ul>\n<li>Redis is very fast at serving queries. Many passwords per second can be tested by an external client.</li>\n<li>The Redis password is stored inside the <code class=\"language-text\">redis.conf</code> file and inside the client configuration, so it does not need to be remembered by the system administrator, and thus it can be very long.</li>\n</ul>\n</blockquote>\n<p>From <a href=\"https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html\">Authenticating Users with Redis AUTH - Amazon ElastiCache for Redis</a> we see some additional AUTH constraints.</p>\n<blockquote>\n<p><strong>AUTH Token Constraints when using with ElastiCache</strong></p>\n<ul>\n<li>Passwords must be at least 16 and a maximum of 128 printable characters.</li>\n<li>The only permitted printable special characters are !, &#x26;, #, $, ^, &#x3C;, >, and -. Other printable special characters cannot be used in the AUTH token.</li>\n<li>AUTH can only be enabled when creating clusters where in-transit encryption is enabled.</li>\n<li>The password set at cluster creation cannot be changed.</li>\n</ul>\n</blockquote>\n<p>Since the special character set is limited, it makes sense to avoid them but generate a very long password.  This also has the side benefit of allowing a “double click” on the string to select it (which is usually hard with interior punctuation).  Below is an AWS CLI command that uses <a href=\"https://aws.amazon.com/secrets-manager/\">AWS Secrets Manager</a> to generate that random string.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws secretsmanager get-random-password --password-length <span class=\"token number\">128</span> --exclude-punctuation \n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"RandomPassword\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"FiXWVSsPAJmA1y4c6E63pc9p4YgM4m0lJzTVeRZD0hyJTiYPqZD5YkToDxBHX9N2APQqhnqVXYNipIkErKByFD9Gx38rbF5vE80z28u2v9NGD9vZz6GtgnElS1yqAfMk\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This secret is needed in plaintext during ElasticCache creation.  It should then be KMS encrypted and stored  in Secrets Manager, the microservice needing access to Redis can retrieve it.</p>\n<p>Note: I was glad to see the usage of <code class=\"language-text\">time_independent_strcmp</code> to avoid timing attacks in <a href=\"https://github.com/antirez/redis/blob/3.2/src/server.c#L2683\">redis/server.c</a></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">authCommand</span><span class=\"token punctuation\">(</span>client <span class=\"token operator\">*</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>server<span class=\"token punctuation\">.</span>requirepass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">addReplyError</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span><span class=\"token string\">\"Client sent AUTH, but no password is set\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">time_independent_strcmp</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">-></span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>ptr<span class=\"token punctuation\">,</span> server<span class=\"token punctuation\">.</span>requirepass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      c<span class=\"token operator\">-></span>authenticated <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">addReply</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>shared<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      c<span class=\"token operator\">-></span>authenticated <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">addReplyError</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span><span class=\"token string\">\"invalid password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Selecting an ElastiCache (Redis) AUTH token","date":"June 27, 2018","tags":["aws","secretsmanager","redis","security"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018-06-27-selecting-an-elasticache-redis-auth-token","previous":{"fields":{"slug":"/2018-06-22-redis-security-investigation"},"frontmatter":{"tags":["aws","redis","security"]}},"next":{"fields":{"slug":"/2018-06-27-making-a-secure-connection-to-elasticache-redis"},"frontmatter":{"tags":["aws","redis","security","networking"]}}}}}